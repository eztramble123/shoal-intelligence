// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password authentication
  
  // Stripe integration fields
  stripeCustomerId       String? @unique
  stripeSubscriptionId   String? @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  
  // Plan selection
  planType               String?   @default("pending")
  planSelectedAt         DateTime?
  
  // User preferences
  baseExchange           String?   @default("binance")
  preferences            Json?     // For future extensibility
  
  // Legacy whitelist fields (kept for data preservation)
  companyName            String?
  companySize            String?
  useCase                String?
  hasUsedTrial           Boolean   @default(false)
  inviteEmailSent        Boolean   @default(false)
  inviteEmailSentAt      DateTime?
  isWhitelisted          Boolean   @default(false)
  trialStartDate         DateTime?
  trialEndDate           DateTime?
  whitelistApprovedAt    DateTime?
  whitelistApprovedBy    String?

  accounts            Account[]
  sessions            Session[]
  subscriptions       Subscription[]
  passwordResetTokens PasswordResetToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Password reset token model
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  used      Boolean  @default(false)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@map("password_reset_tokens")
}

// Subscription management
model Subscription {
  id                       String   @id @default(cuid())
  userId                   String
  stripeSubscriptionId     String   @unique
  stripeCustomerId         String
  stripePriceId            String
  stripeCurrentPeriodStart DateTime
  stripeCurrentPeriodEnd   DateTime
  status                   String   // active, canceled, incomplete, incomplete_expired, past_due, trialing, unpaid
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

// Funding tracking models
model FundingSnapshot {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  sector      String
  totalAmount Float    // Amount in dollars (not formatted)
  dealCount   Int
  percentage  Float    // Percentage of total funding for that day
  
  createdAt DateTime @default(now())
  
  // Composite index for efficient querying
  @@unique([date, sector])
  @@index([sector, date])
  @@map("funding_snapshots")
}

model FundingTrend {
  id                String   @id @default(cuid())
  sector            String   @unique
  currentAmount     Float    // Current period total
  previousAmount    Float    // Previous period total for comparison
  trendPercentage   Float    // Percentage change ((current - previous) / previous) * 100
  trendDirection    String   // 'up', 'down', 'neutral'
  periodDays        Int      // Number of days in comparison period (7, 30, 90)
  lastUpdated       DateTime @default(now())
  
  @@map("funding_trends")
}

// Listings tracking models
model ListingSnapshot {
  id            String   @id @default(cuid())
  date          DateTime @db.Date
  ticker        String
  symbol        String
  name          String
  exchanges     String[] // Array of exchange names
  exchangeCount Int
  price         Float?
  marketCap     Float?
  volume24h     Float?
  scrapedAt     DateTime
  
  createdAt DateTime @default(now())
  
  // Composite index for efficient querying
  @@unique([date, ticker])
  @@index([ticker, date])
  @@map("listing_snapshots")
}

model ListingTrend {
  id                String   @id @default(cuid())
  ticker            String   @unique
  currentExchanges  Int      // Current period exchange count
  previousExchanges Int      // Previous period exchange count  
  trendPercentage   Float    // Percentage change
  trendDirection    String   // 'up', 'down', 'neutral'
  periodDays        Int      // 30, 90, or YTD days
  lastUpdated       DateTime @default(now())
  
  @@map("listing_trends")
}

// Legacy tables (kept for data preservation)
model EnterpriseInquiry {
  id          String   @id @default(cuid())
  email       String
  name        String
  company     String
  companySize String
  useCase     String
  phoneNumber String?
  message     String?
  status      String   @default("new")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("enterprise_inquiries")
}

model WhitelistApplication {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  company         String?
  role            String?
  useCase         String?
  status          String   @default("pending")
  approvedBy      String?
  rejectedBy      String?
  rejectionReason String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("whitelist_applications")
}